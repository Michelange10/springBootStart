/*
 * This file is generated by jOOQ.
*/
package com.zxy.product.test.jooq.tables.pojos;


import com.zxy.common.base.entity.BaseEntity;
import com.zxy.product.test.jooq.tables.interfaces.ITest;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestEntity extends BaseEntity implements ITest {

    private static final long serialVersionUID = 330974878;

    private String  id;
    private String  name;
    private Integer age;
    private Integer sex;

    public TestEntity() {}

    public TestEntity(TestEntity value) {
        this.id = value.id;
        this.name = value.name;
        this.age = value.age;
        this.sex = value.sex;
    }

    public TestEntity(
        String  id,
        String  name,
        Integer age,
        Integer sex
    ) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.sex = sex;
    }

    @Override
    public String getId() {
        return this.id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void setName(String name) {
        this.name = name;
    }

    @Override
    public Integer getAge() {
        return this.age;
    }

    @Override
    public void setAge(Integer age) {
        this.age = age;
    }

    @Override
    public Integer getSex() {
        return this.sex;
    }

    @Override
    public void setSex(Integer sex) {
        this.sex = sex;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TestEntity (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(age);
        sb.append(", ").append(sex);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ITest from) {
        setId(from.getId());
        setName(from.getName());
        setAge(from.getAge());
        setSex(from.getSex());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ITest> E into(E into) {
        into.from(this);
        return into;
    }

    public void forInsert() {
        this.setId(java.util.UUID.randomUUID().toString());
        this.setCreateTime(System.currentTimeMillis());
    }

    public static final <E extends TestEntity> org.jooq.RecordMapper<? extends org.jooq.Record, E> createMapper(Class<E> type) {
        return new org.jooq.RecordMapper<org.jooq.Record, E>() {
            @Override
            public E map(org.jooq.Record record) {
                com.zxy.product.test.jooq.tables.records.TestRecord r = new com.zxy.product.test.jooq.tables.records.TestRecord();
                org.jooq.Row row = record.fieldsRow();
                row.fieldStream().filter(f -> { return f.toString().equals(com.zxy.product.test.jooq.tables.Test.TEST.ID.toString()); }).findAny().ifPresent(field -> {
                    r.setValue(com.zxy.product.test.jooq.tables.Test.TEST.ID, record.getValue(com.zxy.product.test.jooq.tables.Test.TEST.ID));});
                row.fieldStream().filter(f -> { return f.toString().equals(com.zxy.product.test.jooq.tables.Test.TEST.NAME.toString()); }).findAny().ifPresent(field -> {
                    r.setValue(com.zxy.product.test.jooq.tables.Test.TEST.NAME, record.getValue(com.zxy.product.test.jooq.tables.Test.TEST.NAME));});
                row.fieldStream().filter(f -> { return f.toString().equals(com.zxy.product.test.jooq.tables.Test.TEST.AGE.toString()); }).findAny().ifPresent(field -> {
                    r.setValue(com.zxy.product.test.jooq.tables.Test.TEST.AGE, record.getValue(com.zxy.product.test.jooq.tables.Test.TEST.AGE));});
                row.fieldStream().filter(f -> { return f.toString().equals(com.zxy.product.test.jooq.tables.Test.TEST.SEX.toString()); }).findAny().ifPresent(field -> {
                    r.setValue(com.zxy.product.test.jooq.tables.Test.TEST.SEX, record.getValue(com.zxy.product.test.jooq.tables.Test.TEST.SEX));});
                try {
                    E pojo = type.newInstance();
                    pojo.from(r);
                    return pojo;
                } catch (Exception e) {
                    e.printStackTrace(); // ignored
                }
                return null;
            }
        };
    }}
