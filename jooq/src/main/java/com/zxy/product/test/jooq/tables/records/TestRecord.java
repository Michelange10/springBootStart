/*
 * This file is generated by jOOQ.
*/
package com.zxy.product.test.jooq.tables.records;


import com.zxy.product.test.jooq.tables.Test;
import com.zxy.product.test.jooq.tables.interfaces.ITest;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> implements Record4<String, String, Integer, Integer>, ITest {

    private static final long serialVersionUID = -1711260046;

    /**
     * Setter for <code>my_test2.test.id</code>.
     */
    @Override
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>my_test2.test.id</code>.
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>my_test2.test.name</code>.
     */
    @Override
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>my_test2.test.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>my_test2.test.age</code>.
     */
    @Override
    public void setAge(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>my_test2.test.age</code>.
     */
    @Override
    public Integer getAge() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>my_test2.test.sex</code>.
     */
    @Override
    public void setSex(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>my_test2.test.sex</code>.
     */
    @Override
    public Integer getSex() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Test.TEST.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Test.TEST.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Test.TEST.AGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Test.TEST.SEX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getAge();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getSex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value1(String value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value3(Integer value) {
        setAge(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord value4(Integer value) {
        setSex(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestRecord values(String value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ITest from) {
        setId(from.getId());
        setName(from.getName());
        setAge(from.getAge());
        setSex(from.getSex());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ITest> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(String id, String name, Integer age, Integer sex) {
        super(Test.TEST);

        set(0, id);
        set(1, name);
        set(2, age);
        set(3, sex);
    }

    public boolean fromPojo(Object source) {
        if (!(source instanceof com.zxy.product.test.jooq.tables.pojos.TestEntity)) {
            return false;
        }
        com.zxy.product.test.jooq.tables.pojos.TestEntity pojo = (com.zxy.product.test.jooq.tables.pojos.TestEntity)source;
        pojo.into(this);
        return true;
    }
}
